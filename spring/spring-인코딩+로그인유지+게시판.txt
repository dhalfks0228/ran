- 비밀번호 암호화
1. 회원가입시 비밀번호 암호화를 하여 DB에 저장
- UserServiceImp.java 에 추가
@Autowired
	BCryptPasswordEncoder passwordEncoder;

- UserServiceImp.java 에 추가
  - // 아이디가 중복되면 회원가입 실패를 알림
//=> 아이디와 일치하는 정보를 DB에서 가져옴.
	UserVo tmpUser = userDao.getUser(user.getId());
	//=> 가져온 회원정보가 있으면 가입된 아이디 => 아이디 중복 => 회원가입 실패
	if(tmpUser != null) {
		return false;
	}
	//=> 가져온 회원정보가 비어있으면(null) 가입되지 않은 아이디 => 가입 가능
	// 굳이 else를 쓰지 않아도 처리됨. 
	
	// 아이디가 중복되지 않았으면 회원가입을 하고, 성공을 알림
	// 회원정보의 유효성 검사를 하여 유효성 검사에 맞지 않으면 실패를 알림
	// 아이디 유효성 검사 : 아이디가 입력 안되면 회원가입 불가능.
	if(user.getId() == null || user.getId().length() == 0) {
		return false;
	}
	// 비밀번호 유효성 검사 : 비밀번호가 입력 안되면 회원가입 불가능
	if(user.getPw() == null || user.getPw().length() == 0) {
		return false;
	}
	//비밀번호 암호화 과정
	//입력받은 비밀번호
	String pw = user.getPw();
	//입력받은 비밀번호 암호화
	String encodePw =  passwordEncoder.encode(pw);
	//회원 비밀번호를 암화화된 비밀번호로 수정
	user.setPw(encodePw);
	// 회원가입 => user테이블에 회원 정보를 추가(insert)
	userDao.insertUser(user);
	return true;


2. 기존에 있는 로그인시 비밀번호 확인하는 코드를 수정
- HomeController.java에서 isUser의 리턴타입 변경. 
UserVo isUser = userService.isUser(username, password);
	mv.addObject("user", isUser);

- UserServiceImp.java에서 isUser메소드 수정
UserVo user = userDao.getUser(id);
	//id와 일치하는 회원정보가 없으면
	if(user == null) {
	return null; //회원 아님.
	}
	//id와 일치하는 회원정보가 있다는 의미.
	// 비밀번호와 비교하여 확인.
	//matches(원래 비번, 암호화된 비번)
	if(passwordEncoder.matches(pw, user.getPw())) {
	return user; //회원
	}
	return null; //비밀변호가 다른 경우 회원 아님.

3. 로그인 유지
- 인터셉터 : URL과 컨트롤러 사이의 정보를 주고받을 때 가로채서 원하는
정보를 확인후 일처리를 함.
- LoginInterceptor : 컨트롤러가 URL에게 회원 데이터를 전송할 때 
회원 데이터를 가로채서 있으면 세션에 저장. 
없으면 저장하지 않음. 

URL => (url, 데이터) 컨트롤러
      <= (데이터, 화면)


BoardController, BoardService, BoardServiceImp, 
BoardDao, BoardMapper
게시판 리스트(/board/list)
- 게시글(BoardVo) : board테이블의 속성
- /board/list url을 담당할 수 있는 메소드 생성 : BoardController
- BoardController
  - 보드서비스에게 게시글전체를 달라고 요청
  - 보드서비스가 준 게시글 전체를 화면에 전송
  - 화면 jsp를 지정(mv.setViewName("/xxx/yyy");)
- BoardService
  - 보드다오에게 게시글 전체를 달라고 요청
  - 가져온 게시글을 반환
- BoardDao
  - 게시글 전체를 가져오는 메소드만 생성
 - BoardMapper
  - 게시글 전체를 가져오는 쿼리문 생성
- 화면
  - 서버에서 보내준 전체 게시글을 테이블을 이용하여 화면에 출력
 <c:forEach> 사용

상세내용 리스트
- BoardController
  - /board/detail url을 담당하는 메소드 추가
     - 화면에서 게시글 번호를 넘겨 받음 (매개변수)
     - 서비스에게 번호를 주고, 해당 번호에 맞는 게시글을 요청
     - 서비스가 준 게시글을 화면에 전송
- BoardServiceImp
  - 번호가 null이면 null을 리턴
  - 다오에게 번호를 주고 해당 번호에 맞는 게시글을 가져오라고 요청
  - 다오가 준 게시글을 반환
- BoardDao
  - 번호가 주오지면 게시글을 전달하는 메소드 생성
- BoardMapper
  - 번호와 일치하는 게시글을 전달하는 쿼리문 작성
- 화면
-/board/list.jsp
- 제목을 클릭하면 게시글 상세 페이지로 이동하게 a코드 수정
- /board/detail.jsp
  - 서버가 보내준 게시글이 있으면 게시글 출력
  - 서버에서 보내준 게시글이 없으면 존재하지 않은 게시글입니다라고 출력
